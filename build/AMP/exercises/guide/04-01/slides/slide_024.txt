Let’s dive into the architecture of Apache Iceberg and understand how it bypasses the traditional Hive metastore to deliver superior performance and flexibility. This slide breaks down the layers of Iceberg, so let’s go through each one.

First, we have the **Iceberg Catalog**. This is where the current metadata pointer resides. The catalog manages the table definitions and keeps track of the most recent versions of your tables. Unlike Hive, which relies on a metastore that points to directories, Iceberg’s catalog is more granular and efficient.

Next, we move to the **Metadata Layer**. This layer is crucial for understanding how Iceberg manages data. It consists of **metadata files** and **manifest lists**. Each metadata file points to a specific snapshot of your data. A snapshot is essentially a version of your table at a particular point in time.

Within the metadata layer, we have:
- **Manifest lists**: These contain the list of manifest files associated with each snapshot. Each manifest file in the list is stored with detailed information about its contents, including partition value ranges. This helps speed up metadata operations significantly.
- **Manifest files**: These files contain lists of paths to the related data files. They provide a detailed map of where your data is stored, making it easier to locate and query specific data.

Finally, we have the **Data Layer**. This is where your actual data files are stored. Iceberg supports multiple native formats like ORC, PARQUET, and AVRO. This flexibility allows you to choose the best format for your specific use case.

One of the key advantages of Iceberg is that it **tracks data at the file level**. Unlike Hive, which points to directories or sets of directories, Iceberg defines a table as a canonical list of files. This approach leads to a **10x performance improvement** because it eliminates the overhead associated with directory-based metadata management.

To summarize:
- **Iceberg Catalog**: Manages table definitions and recent versions.
- **Metadata Layer**: Includes metadata files, manifest lists, and manifest files that provide detailed information about data locations and partitions.
- **Data Layer**: Stores data in native formats, offering flexibility and efficiency.

