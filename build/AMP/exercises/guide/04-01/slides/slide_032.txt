"Let’s dive into the **time travel** feature in Apache Iceberg, which allows you to query data as it existed at a specific point in time. This is a powerful feature for debugging, auditing, and historical analysis.

First, let’s talk about **listing snapshots**. You can retrieve the history of snapshots for a table using a SQL query. For example:

```sql
select * from local.nyc.taxis_COM.snapshots;
```

This query will return a list of all snapshots associated with the table, including details like the snapshot ID, timestamp, and the changes made. This is useful for understanding the evolution of your data over time.

Next, let’s explore **time travel based on a timestamp**. You can query data as it existed at a specific point in time by specifying a timestamp. Here’s an example:

```scala
spark.read
  .option("as-of-timestamp", NOW - 10000)
  .table("local.db.table1")
```

This query will return the state of the table as it was 10,000 milliseconds ago. You can also use a specific timestamp in milliseconds:

```scala
spark.read
  .option("as-of-timestamp", System.currentTimeMillis() - 800000)
  .table("local.db.table1")
```

This allows you to perform precise time travel queries based on exact timestamps.

Finally, you can also perform time travel using a **specific snapshot ID**. Here’s how you can do it:

```scala
spark.read
  .format("iceberg")
  .option("snapshot-id", 1976237725446727050L)
  .load("local.market.department")
```

This query will return the state of the table as it existed at the specified snapshot ID.

To summarize:
- **Listing Snapshots**: Retrieve the history of snapshots to understand how your data has changed over time.
- **Time Travel Based on Timestamp**: Query data as it existed at a specific point in time using a timestamp.
- **Time Travel Based on Snapshot ID**: Query data as it existed at a specific snapshot ID.

These features make Iceberg a powerful tool for managing and analyzing large datasets with complex histories.

